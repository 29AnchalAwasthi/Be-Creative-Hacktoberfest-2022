#include <bits/stdc++.h>
using namespace std;
    
bool findEmpty(vector<vector<char>>& board, int& row, int& col) {
    for(int i=0;i<9;i++) {
        for(int j=0;j<9;j++) {
            if(board[i][j] == '.') {
                row=i;
                col=j;
                return true;
            }
        }
    }
    return false;
}
    
bool isSafe(vector<vector<char>> &board, int row, int col, char val) {
    int rowFactor = (row-row%3), colFactor = (col-col%3);
    for(int i=0;i<9;i++) {
        if(board[row][i] == val) {
            return false;
        }
    }
    for(int i=0;i<9;i++) {
        if(board[i][col] == val) {
            return false;
        }
    }
    for(int i=0;i<3;i++) {
        for(int j=0;j<3;j++) {
            if(board[i+rowFactor][j+colFactor] == val) {
                return false;
            }
        }
    }
    return true;
}

bool helper(vector<vector<char>>& board) {
    int row, col;
    if(!findEmpty(board,row,col)) {
        return true;
    }
    for(char c='1';c<='9';c++) {
        if(isSafe(board,row,col,c)) {
            board[row][col] = c;
            if(helper(board)) {
                return true;
            }
            board[row][col] = '.';
        }
    }
    return false;
}
    
int main() {
    vector<vector<char>> board = {{'5','3','.','.','7','.','.','.','.'},
                                  {'6','.','.','1','9','5','.','.','.'},
                                  {'.','9','8','.','.','.','.','6','.'},
                                  {'8','.','.','.','6','.','.','.','3'},
                                  {'4','.','.','8','.','3','.','.','1'},
                                  {'7','.','.','.','2','.','.','.','6'},
                                  {'.','6','.','.','.','.','2','8','.'},
                                  {'.','.','.','4','1','9','.','.','5'},
                                  {'.','.','.','.','8','.','.','7','9'}};
    helper(board);
    
    for(int i=0;i<board.size();i++) {
        for(int j=0;j<board.size();j++) {
            cout << board[i][j] << " ";
        }
        cout << endl;
    }
    return 0;
}
